/**
 * Ïø†ÌÇ§ Ï≤¥ÌÅ¨ Ïú†Ìã∏Î¶¨Ìã∞
 * - ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏùò Ïø†ÌÇ§ Ï†ïÎ≥¥Î•º Ï≤¥ÌÅ¨ÌïòÍ≥† Î∂ÑÏÑù
 */

/**
 * ÌéòÏù¥ÏßÄÏùò Ïø†ÌÇ§ Ï≤¥ÌÅ¨
 */
async function checkCookies(context) {
  try {
    console.log(`\nüç™ Ïø†ÌÇ§ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ï§ë...`);
    
    // Î™®Îì† Ïø†ÌÇ§ Í∞ÄÏ†∏Ïò§Í∏∞
    const cookies = await context.cookies();
    console.log(`   Ï¥ù Ïø†ÌÇ§ Ïàò: ${cookies.length}Í∞ú`);
    
    // Ïø†Ìå° Í¥ÄÎ†® Ï§ëÏöî Ïø†ÌÇ§ Ï≤¥ÌÅ¨
    const importantCookies = [
      'PCID',           // PC ÏãùÎ≥ÑÏûê
      'sid',            // ÏÑ∏ÏÖò ID
      'x-coupang-accept-language',
      'x-coupang-target-market',
      'bm_sz',          // Î¥á Í∞êÏßÄ Í¥ÄÎ†®
      'ak_bmsc',        // Akamai Î¥á Îß§ÎãàÏ†Ä
      '_abck'           // Akamai Î¥á Í∞êÏßÄ
    ];
    
    console.log(`   Ï§ëÏöî Ïø†ÌÇ§ ÏÉÅÌÉú:`);
    for (const cookieName of importantCookies) {
      const cookie = cookies.find(c => c.name === cookieName);
      if (cookie) {
        console.log(`   ‚úì ${cookieName}: ${cookie.value.substring(0, 20)}...`);
      } else {
        console.log(`   ‚úó ${cookieName}: ÏóÜÏùå`);
      }
    }
    
    // Î¥á Í∞êÏßÄ Í¥ÄÎ†® Ïø†ÌÇ§ Î∂ÑÏÑù
    const botCookies = cookies.filter(c => 
      c.name.includes('bm_') || 
      c.name.includes('ak_') || 
      c.name === '_abck'
    );
    
    if (botCookies.length > 0) {
      console.log(`   ‚ö†Ô∏è  Î¥á Í∞êÏßÄ Ïø†ÌÇ§ Î∞úÍ≤¨: ${botCookies.length}Í∞ú`);
      botCookies.forEach(cookie => {
        console.log(`      - ${cookie.name}: ${cookie.domain}`);
      });
    }
    
    // Ïø†ÌÇ§ ÎèÑÎ©îÏù∏ Î∂ÑÏÑù
    const domains = [...new Set(cookies.map(c => c.domain))];
    console.log(`   Ïø†ÌÇ§ ÎèÑÎ©îÏù∏: ${domains.join(', ')}`);
    
    console.log('');
    
  } catch (error) {
    console.error('‚ùå Ïø†ÌÇ§ Ï≤¥ÌÅ¨ Ï§ë Ïò§Î•ò:', error.message);
  }
}

/**
 * Ïø†ÌÇ§ ÎπÑÍµê (Ï¥àÍ∏∞ Ïø†ÌÇ§ÏôÄ ÌòÑÏû¨ Ïø†ÌÇ§)
 */
async function compareCookies(context, initialCookies) {
  try {
    const currentCookies = await context.cookies();
    
    // ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Ïø†ÌÇ§
    const newCookies = currentCookies.filter(current => 
      !initialCookies.find(initial => 
        initial.name === current.name && initial.domain === current.domain
      )
    );
    
    if (newCookies.length > 0) {
      console.log(`üç™ ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Ïø†ÌÇ§: ${newCookies.length}Í∞ú`);
      newCookies.forEach(cookie => {
        console.log(`   + ${cookie.name} (${cookie.domain})`);
      });
    }
    
    // ÏÇ≠Ï†úÎêú Ïø†ÌÇ§
    const deletedCookies = initialCookies.filter(initial => 
      !currentCookies.find(current => 
        current.name === initial.name && current.domain === initial.domain
      )
    );
    
    if (deletedCookies.length > 0) {
      console.log(`üç™ ÏÇ≠Ï†úÎêú Ïø†ÌÇ§: ${deletedCookies.length}Í∞ú`);
      deletedCookies.forEach(cookie => {
        console.log(`   - ${cookie.name} (${cookie.domain})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Ïø†ÌÇ§ ÎπÑÍµê Ï§ë Ïò§Î•ò:', error.message);
  }
}

module.exports = {
  checkCookies,
  compareCookies
};
const dbServiceV2 = require('../lib/services/db-service-v2');
const fs = require('fs');
const path = require('path');

async function analyzePerformanceLoss() {
  try {
    console.log('=== ID 25, 46, 47Î≤à ÏÑ±Îä• Ï†ÄÌïò ÏõêÏù∏ Î∂ÑÏÑù ===\n');
    
    // 1. Ìï¥Îãπ ÌÇ§ÏõåÎìúÎì§Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
    const result = await dbServiceV2.query(`
      SELECT id, keyword, agent, cart_click_enabled, success_count, fail_count, 
             total_blocks, optimization_config, created_at
      FROM v2_test_keywords 
      WHERE id IN (25, 46, 47)
      ORDER BY id
    `);
    
    console.log('üìã Í∏∞Î≥∏ Ï†ïÎ≥¥:');
    result.rows.forEach(row => {
      const config = row.optimization_config || {};
      console.log(`\nID ${row.id}: ${row.keyword}`);
      console.log(`  ÏóêÏù¥Ï†ÑÌä∏: ${row.agent}`);
      console.log(`  ÏÑ±Í≥µ: ${row.success_count}, Ïã§Ìå®: ${row.fail_count}`);
      console.log(`  Ï∞®Îã®Îüâ: ${row.total_blocks}`);
      console.log(`  Ïπ¥Ìä∏ ÌÅ¥Î¶≠: ${row.cart_click_enabled ? 'O' : 'X'}`);
      console.log(`  ÏÉùÏÑ±Ïùº: ${row.created_at}`);
    });
    
    // 2. MD ÌååÏùºÍ≥º ÎπÑÍµê
    const mdPath = path.join(__dirname, '..', '2025-08-06.md');
    const mdData = fs.readFileSync(mdPath, 'utf8');
    const mdLines = mdData.trim().split('\n');
    const mdKeywords = [];
    
    mdLines.forEach(line => {
      const parts = line.split('\t');
      if (parts.length >= 5) {
        mdKeywords.push({
          keyword: parts[0].replace(/'/g, '').trim(),
          search: parseInt(parts[1].replace(/[',]/g, '')) || 0,
          exposure: parseInt(parts[2].replace(/[',]/g, '')) || 0,
          click: parseInt(parts[3].replace(/[',]/g, '')) || 0,
          cart: parseInt(parts[4].replace(/[',]/g, '')) || 0
        });
      }
    });
    
    console.log('\nüìä MD ÌååÏùºÍ≥º ÏÑ±Îä• Î°úÏä§ Î∂ÑÏÑù:');
    result.rows.forEach(row => {
      const mdMatch = mdKeywords.find(md => 
        md.keyword.toLowerCase().trim() === (row.keyword || '').toLowerCase().trim()
      );
      
      console.log(`\nID ${row.id}: ${row.keyword}`);
      if (mdMatch) {
        console.log(`  MDÎç∞Ïù¥ÌÑ∞: Í≤ÄÏÉâ ${mdMatch.search}, ÎÖ∏Ï∂ú ${mdMatch.exposure}, ÌÅ¥Î¶≠ ${mdMatch.click}, Îã¥Í∏∞ ${mdMatch.cart}`);
        console.log(`  DBÏÑ±Í≥µÎ•†: ${row.success_count} (vs MDÎÖ∏Ï∂ú ${mdMatch.exposure})`);
        
        // ÏÑ±Îä• Î°úÏä§ Í≥ÑÏÇ∞
        const exposureLoss = ((mdMatch.exposure - row.success_count) / mdMatch.exposure * 100).toFixed(1);
        const clickLoss = ((mdMatch.click - row.success_count) / mdMatch.click * 100).toFixed(1);
        
        console.log(`  ‚ö†Ô∏è ÎÖ∏Ï∂ú Î°úÏä§: ${exposureLoss}% (${mdMatch.exposure - row.success_count}Í∞ú)`);
        console.log(`  ‚ö†Ô∏è ÌÅ¥Î¶≠ Î°úÏä§: ${clickLoss}% (${mdMatch.click - row.success_count}Í∞ú)`);
        
        // Ïã¨Í∞ÅÎèÑ ÌèâÍ∞Ä
        if (parseFloat(exposureLoss) > 50) {
          console.log(`  üö® Ïã¨Í∞ÅÌïú ÎÖ∏Ï∂ú Î°úÏä§ Î∞úÏÉù!`);
        }
        if (parseFloat(clickLoss) > 50) {
          console.log(`  üö® Ïã¨Í∞ÅÌïú ÌÅ¥Î¶≠ Î°úÏä§ Î∞úÏÉù!`);
        }
      } else {
        console.log(`  ‚ùå MDÌååÏùºÏóêÏÑú Îß§Ïπ≠ÎêòÏßÄ ÏïäÏùå`);
      }
    });
    
    // 3. optimization_config ÏÉÅÏÑ∏ Î∂ÑÏÑù
    console.log('\n‚öôÔ∏è optimization_config ÏÉÅÏÑ∏ Î∂ÑÏÑù:');
    result.rows.forEach(row => {
      const config = row.optimization_config || {};
      console.log(`\nID ${row.id} ÏÑ§Ï†ï:`);
      console.log(`  main_allow: ${JSON.stringify(config.coupang_main_allow || [])}`);
      console.log(`  image_allow: ${JSON.stringify(config.image_cdn_allow || [])}`);
      console.log(`  img1a_allow: ${JSON.stringify(config.img1a_cdn_allow || [])}`);
      console.log(`  front_allow: ${JSON.stringify(config.front_cdn_allow || [])}`);
      console.log(`  static_allow: ${JSON.stringify(config.static_cdn_allow || [])}`);
      console.log(`  mercury_allow: ${JSON.stringify(config.mercury_allow || [])}`);
      console.log(`  ljc_allow: ${JSON.stringify(config.ljc_allow || [])}`);
    });
    
    // 4. ÏÑ±Í≥µÌïú ÌÇ§ÏõåÎìúÎì§Í≥º ÏÑ§Ï†ï ÎπÑÍµê
    console.log('\nüèÜ ÏÑ±Í≥µ ÌÇ§ÏõåÎìúÎì§Í≥º ÏÑ§Ï†ï ÎπÑÍµê:');
    const successResult = await dbServiceV2.query(`
      SELECT id, keyword, agent, success_count, optimization_config
      FROM v2_test_keywords 
      WHERE id >= 25 AND id <= 61 AND success_count > 70
      ORDER BY success_count DESC
      LIMIT 5
    `);
    
    console.log('ÏÉÅÏúÑ 5Í∞ú ÏÑ±Í≥µ ÌÇ§ÏõåÎìú:');
    successResult.rows.forEach(row => {
      const config = row.optimization_config || {};
      console.log(`\nID ${row.id}: ${row.keyword} (ÏÑ±Í≥µ: ${row.success_count})`);
      console.log(`  ÏóêÏù¥Ï†ÑÌä∏: ${row.agent}`);
      console.log(`  front_allow: ${JSON.stringify(config.front_cdn_allow || [])}`);
      console.log(`  mercury_allow: ${JSON.stringify(config.mercury_allow || [])}`);
      console.log(`  ljc_allow: ${JSON.stringify(config.ljc_allow || [])}`);
    });
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
  } finally {
    await dbServiceV2.close();
  }
}

analyzePerformanceLoss();
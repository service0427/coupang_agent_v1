const dbServiceV2 = require('../lib/services/db-service-v2');

async function checkRecentTest1Errors() {
  try {
    console.log('üîç test1 ÏóêÏù¥Ï†ÑÌä∏ ÏµúÍ∑º ÏóêÎü¨ Î°úÍ∑∏ ÌôïÏù∏');
    console.log('‚îÄ'.repeat(50));
    
    // ÏµúÍ∑º 10Î∂ÑÍ∞Ñ test1 ÏóêÎü¨ ÌôïÏù∏
    const recentErrors = await dbServiceV2.query(`
      SELECT 
        el.id as execution_id,
        el.keyword,
        el.started_at,
        el.final_status,
        er.error_code,
        er.error_message,
        er.occurred_at
      FROM v2_error_logs er
      JOIN v2_execution_logs el ON er.execution_id = el.id
      WHERE el.agent = 'test1'
        AND er.occurred_at >= NOW() - INTERVAL '10 minutes'
      ORDER BY er.occurred_at DESC
      LIMIT 10
    `);
    
    if (recentErrors.rows.length > 0) {
      console.log(`Î∞úÍ≤¨Îêú ÏµúÍ∑º ÏóêÎü¨: ${recentErrors.rows.length}Í∞ú\n`);
      
      recentErrors.rows.forEach(error => {
        const timeAgo = Math.round((Date.now() - new Date(error.occurred_at)) / (1000 * 60));
        console.log(`‚ùå Ïã§Ìñâ ID ${error.execution_id}: ${error.keyword}`);
        console.log(`   ÏóêÎü¨: ${error.error_code}`);
        console.log(`   Î©îÏãúÏßÄ: ${error.error_message.substring(0, 100)}...`);
        console.log(`   Î∞úÏÉùÏãúÍ∞Ñ: ${timeAgo}Î∂Ñ Ï†Ñ`);
        console.log(`   ÏµúÏ¢ÖÏÉÅÌÉú: ${error.final_status}`);
        console.log('');
      });
    } else {
      console.log('‚úÖ ÏµúÍ∑º 10Î∂ÑÍ∞Ñ test1 ÏóêÎü¨ ÏóÜÏùå');
    }
    
    // ÏµúÍ∑º 1ÏãúÍ∞ÑÍ∞Ñ test1 Ïã§Ìñâ ÌÜµÍ≥Ñ
    console.log('\nüìä test1 ÏµúÍ∑º 1ÏãúÍ∞Ñ Ïã§Ìñâ ÌÜµÍ≥Ñ');
    console.log('‚îÄ'.repeat(30));
    
    const stats = await dbServiceV2.query(`
      SELECT 
        COUNT(*) as total_executions,
        COUNT(CASE WHEN overall_success = true THEN 1 END) as success_count,
        COUNT(CASE WHEN overall_success = false THEN 1 END) as fail_count,
        COUNT(CASE WHEN final_status = 'in_progress' THEN 1 END) as in_progress_count
      FROM v2_execution_logs 
      WHERE agent = 'test1'
        AND started_at >= NOW() - INTERVAL '1 hour'
    `);
    
    const stat = stats.rows[0];
    const successRate = stat.total_executions > 0 ? 
      ((stat.success_count / stat.total_executions) * 100).toFixed(1) : 0;
    
    console.log(`Ï†ÑÏ≤¥ Ïã§Ìñâ: ${stat.total_executions}Ìöå`);
    console.log(`ÏÑ±Í≥µ: ${stat.success_count}Ìöå`);
    console.log(`Ïã§Ìå®: ${stat.fail_count}Ìöå`);
    console.log(`ÏßÑÌñâÏ§ë: ${stat.in_progress_count}Ìöå`);
    console.log(`ÏÑ±Í≥µÎ•†: ${successRate}%`);
    
    // ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ïã§Ìñâ ÌôïÏù∏
    if (parseInt(stat.in_progress_count) > 0) {
      console.log('\nüîÑ ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ïã§ÌñâÎì§:');
      const inProgress = await dbServiceV2.query(`
        SELECT id, keyword, started_at, last_successful_stage
        FROM v2_execution_logs 
        WHERE agent = 'test1' 
          AND final_status = 'in_progress'
        ORDER BY started_at DESC
      `);
      
      inProgress.rows.forEach(exec => {
        const runningMinutes = Math.round((Date.now() - new Date(exec.started_at)) / (1000 * 60));
        console.log(`  ID ${exec.id}: ${exec.keyword} (${runningMinutes}Î∂Ñ Ïã§ÌñâÏ§ë, Îã®Í≥Ñ: ${exec.last_successful_stage})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
  } finally {
    await dbServiceV2.close();
  }
}

checkRecentTest1Errors();
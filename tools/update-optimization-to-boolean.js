#!/usr/bin/env node
/**
 * optimization_configÎ•º Î∞∞Ïó¥ÏóêÏÑú booleanÏúºÎ°ú Î≥ÄÍ≤ΩÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
 * Í∏∞Ï°¥: {"mercury_allow": [], "image_cdn_allow": []} 
 * Ïã†Í∑ú: {"block_mercury": true, "block_image_cdn": true}
 */

const { Pool } = require('pg');
const fs = require('fs').promises;

// ÌôòÍ≤Ω ÏÑ§Ï†ï Î°úÎìú
const config = require('../environment');

async function updateOptimizationConfig() {
  const pool = new Pool(config.database);
  
  try {
    console.log('üîÑ optimization_config ÌòïÏãù Î≥ÄÍ≤Ω ÏãúÏûë...');
    
    // ÌòÑÏû¨ ÌÇ§ÏõåÎìúÎì§ Ï°∞Ìöå
    const result = await pool.query(`
      SELECT id, keyword, optimization_config 
      FROM v2_test_keywords 
      ORDER BY id
    `);
    
    console.log(`üìä Ï¥ù ${result.rows.length}Í∞ú ÌÇ§ÏõåÎìú Ï≤òÎ¶¨ ÏòàÏ†ï`);
    
    let updatedCount = 0;
    let skippedCount = 0;
    
    for (const row of result.rows) {
      const { id, keyword, optimization_config } = row;
      
      if (!optimization_config) {
        console.log(`‚è≠Ô∏è  ID:${id} ${keyword} - optimization_config ÏóÜÏùå, Í±¥ÎÑàÎúÄ`);
        skippedCount++;
        continue;
      }
      
      // Í∏∞Ï°¥ Î∞∞Ïó¥ ÌòïÏãùÏóêÏÑú boolean ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
      const oldConfig = optimization_config;
      const newConfig = {
        block_mercury: !oldConfig.mercury_allow || oldConfig.mercury_allow.length === 0,
        block_image_cdn: !oldConfig.image_cdn_allow || oldConfig.image_cdn_allow.length === 0,
        block_img1a_cdn: !oldConfig.img1a_cdn_allow || oldConfig.img1a_cdn_allow.length === 0,
        block_thumbnail_cdn: !oldConfig.thumbnail_cdn_allow || oldConfig.thumbnail_cdn_allow.length === 0
      };
      
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
      await pool.query(
        'UPDATE v2_test_keywords SET optimization_config = $1 WHERE id = $2',
        [JSON.stringify(newConfig), id]
      );
      
      console.log(`‚úÖ ID:${id} ${keyword}`);
      console.log(`   Í∏∞Ï°¥: mercury=${JSON.stringify(oldConfig.mercury_allow || [])}, image=${JSON.stringify(oldConfig.image_cdn_allow || [])}`);
      console.log(`   Ïã†Í∑ú: mercury=${newConfig.block_mercury}, image=${newConfig.block_image_cdn}`);
      
      updatedCount++;
    }
    
    console.log('\nüìã Î≥ÄÍ≤Ω ÏôÑÎ£å ÏöîÏïΩ:');
    console.log(`   ÏóÖÎç∞Ïù¥Ìä∏Îê®: ${updatedCount}Í∞ú`);
    console.log(`   Í±¥ÎÑàÎúÄ: ${skippedCount}Í∞ú`);
    console.log(`   Ï¥ùÌï©: ${result.rows.length}Í∞ú`);
    
    // Î≥ÄÍ≤Ω Í≤∞Í≥º Í≤ÄÏ¶ù
    console.log('\nüîç Î≥ÄÍ≤Ω Í≤∞Í≥º Í≤ÄÏ¶ù...');
    const verifyResult = await pool.query(`
      SELECT id, keyword, optimization_config 
      FROM v2_test_keywords 
      WHERE optimization_config IS NOT NULL
      ORDER BY id
      LIMIT 5
    `);
    
    console.log('\nüìã Î≥ÄÍ≤Ω Í≤∞Í≥º ÏÉòÌîå:');
    verifyResult.rows.forEach(row => {
      const config = row.optimization_config;
      console.log(`   ID:${row.id} ${row.keyword}: mercury=${config.block_mercury}, image=${config.block_image_cdn}`);
    });
    
  } catch (error) {
    console.error('‚ùå Î≥ÄÍ≤Ω Ïã§Ìå®:', error.message);
    console.error(error.stack);
  } finally {
    await pool.end();
  }
}

// Ïã§Ìñâ
if (require.main === module) {
  updateOptimizationConfig().catch(console.error);
}

module.exports = updateOptimizationConfig;
/**
 * ÌÇ§ÏõåÎìúÎ≥Ñ optimization_config Î∂ÑÏÑù ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÎèÑÍµ¨
 * 2025-08-06.md Îç∞Ïù¥ÌÑ∞ÏôÄ v2_test_keywords ÌÖåÏù¥Î∏îÏùÑ Îß§Ïπ≠ÌïòÏó¨ Î∂ÑÏÑù
 */

const fs = require('fs');
const path = require('path');
const dbServiceV2 = require('../lib/services/db-service-v2');

/**
 * 2025-08-06.md ÌååÏùºÏóêÏÑú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞
 */
function readDataFromFile() {
  const fs = require('fs');
  const path = require('path');
  
  try {
    const mdFilePath = path.join(__dirname, '..', '2025-08-06.md');
    const fileContent = fs.readFileSync(mdFilePath, 'utf8');
    return fileContent.trim();
  } catch (error) {
    console.error('2025-08-06.md ÌååÏùº ÏùΩÍ∏∞ Ïã§Ìå®:', error);
    // Ìè¥Î∞± Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†ú ÌååÏùºÍ≥º ÎèôÏùº)
    return `'Ìì®Ïñ¥ÎùºÏù¥Ìä∏ ÎπÑÎ£∏ Ïó∞Ïû•Î¥â b1'	'89'	'89'	'88'	'77'
'Ìì®Ïñ¥ÎùºÏù¥Ìä∏ ÎπÑÎ£∏ Ïó∞Ïû•Î¥â v9'	'89'	'89'	'87'	'78'
'ÎπÑÎ£∏ Ìì®Ïñ¥ÎùºÏù¥Ìä∏ Ïó∞Ïû•Î¥â'	'13'	'88'	'87'	'76'
'Ïó∞Ïû•Î¥â ÎπÑÎ£∏ Ìì®Ïñ¥ÎùºÏù¥Ìä∏ Î¨¥ÏÑ†Ï≤≠ÏÜåÍ∏∞ 23000 V9-B1'	'13'	'13'	'13'	'0'
'ÎπÑÎ£∏ Î¨¥ÏÑ†Ï≤≠ÏÜåÍ∏∞ Ìì®Ïñ¥ÎùºÏù¥Ìä∏ Ìó§ÌååÌïÑÌÑ∞'	'78'	'78'	'78'	'0'
'ÎπÑÎ£∏ 23000 V9-B1 Ï≤≠ÏÜåÍ∏∞ ÌïÑÌÑ∞ Ìó§Ìåå'	'77'	'76'	'76'	'0'
'ÎπÑÎ£∏ Ï≤≠ÏÜåÍ∏∞ Ï†ïÌíà Ìó§ÌååÌïÑÌÑ∞'	'74'	'73'	'72'	'0'
'ÎπÑÎ£∏ Ìì®Ïñ¥ÎùºÏù¥Ìä∏ Î®ºÏßÄÌïÑÌÑ∞ÌÜµ - Ï§ëÎ≥µ'	'64'	'49'	'0'	'0'
'ÎπÑÎ£∏ 23000 V9-B1 Î∞∞ÌÑ∞Î¶¨ Ïó∞Í≤∞Ïû≠'	'65'	'46'	'44'	'36'
'ÎπÑÎ£∏ Ï≤≠ÏÜåÍ∏∞ Ï†ÑÏö© Ï†ÑÏõê Ï∂©Ï†ÑÍ∏∞'	'65'	'38'	'36'	'26'
'ÎπÑÎ£∏ Ï≤≠ÏÜåÍ∏∞ Ï†ÑÏö© Ï†ÑÏõê ÏïÑÎãµÌÑ∞'	'82'	'24'	'23'	'21'
'ÎπÑÎ£∏ Î¨¥ÏÑ†Ï≤≠ÏÜåÍ∏∞ Ìà¨Î™Ö Î®ºÏßÄÌÜµ Î¶¨ÌïÑ'	'100'	'100'	'100'	'0'
'ÎπÑÎ£∏ 23000 V9-B1 Ï≤≠ÏÜåÍ∏∞ Î®ºÏßÄÌÜµ ÍµêÏ≤¥'	'82'	'82'	'82'	'73'
'ÎπÑÎ£∏ Î¨¥ÏÑ†Ï≤≠ÏÜåÍ∏∞ Ìì®Ïñ¥ÎùºÏù¥Ìä∏ Î®ºÏßÄÌÜµ'	'82'	'82'	'82'	'73'
'ÎπÑÎ£∏ Ï≤≠ÏÜåÍ∏∞ Î∂ÑÎ¶¨Ìòï Î®ºÏßÄÌÜµ Î∂ÄÌíà'	'81'	'81'	'81'	'0'
'ÎπÑÎ£∏ Ìì®Ïñ¥ÎùºÏù¥Ìä∏ Ï≤≠ÏÜåÍ∏∞ ÏàòÍ±∞ÌÜµ'	'82'	'81'	'81'	'0'
'ÎπÑÎ£∏ Ï≤≠ÏÜåÍ∏∞ Î®ºÏßÄ ÏàòÍ±∞ÌÜµ Ï†ïÌíà'	'64'	'64'	'63'	'0'
'ÎπÑÎ£∏ Î¨¥ÏÑ†Ï≤≠ÏÜåÍ∏∞ Î¶¨ÌïÑÌòï Î®ºÏßÄÌÜµ'	'13'	'13'	'13'	'0'`;
  }
}

/**
 * ÏõêÏãú Îç∞Ïù¥ÌÑ∞ ÌååÏã±
 */
function parseRawData() {
  const rawData = readDataFromFile();
  const lines = rawData.trim().split('\n');
  const results = [];
  
  lines.forEach((line, index) => {
    // ÌÉ≠ÏúºÎ°ú Íµ¨Î∂ÑÎêú Îç∞Ïù¥ÌÑ∞ ÌååÏã±
    const parts = line.split('\t');
    if (parts.length >= 5) {
      const keyword = parts[0].replace(/'/g, '').trim();
      const search = parseInt(parts[1].replace(/[',]/g, '')) || 0;
      const exposure = parseInt(parts[2].replace(/[',]/g, '')) || 0;
      const click = parseInt(parts[3].replace(/[',]/g, '')) || 0;
      const cart = parseInt(parts[4].replace(/[',]/g, '')) || 0;
      
      if (keyword) {
        results.push({
          id: index + 1,
          keyword: keyword,
          search: search,
          exposure: exposure,
          click: click,
          cart: cart
        });
      }
    }
  });
  
  return results;
}

/**
 * optimization_configÎ•º Í∞úÎ≥Ñ Ïª¨ÎüºÏúºÎ°ú Î∂ÑÌï¥
 */
function parseOptimizationConfig(config) {
  if (!config) {
    return {
      coupang_main_allow: null,
      image_cdn_allow: null,
      img1a_cdn_allow: null,
      front_cdn_allow: null,
      static_cdn_allow: null,
      assets_cdn_allow: null,
      mercury_allow: null,
      ljc_allow: null,
      thumbnail_cdn_allow: null,
      coupang_main_block_patterns: null
    };
  }
  
  let parsed;
  try {
    parsed = typeof config === 'string' ? JSON.parse(config) : config;
  } catch (e) {
    console.error('Config parsing error:', e);
    return {
      coupang_main_allow: 'PARSE_ERROR',
      image_cdn_allow: 'PARSE_ERROR',
      img1a_cdn_allow: 'PARSE_ERROR',
      front_cdn_allow: 'PARSE_ERROR',
      static_cdn_allow: 'PARSE_ERROR',
      assets_cdn_allow: 'PARSE_ERROR',
      mercury_allow: 'PARSE_ERROR',
      ljc_allow: 'PARSE_ERROR',
      thumbnail_cdn_allow: 'PARSE_ERROR',
      coupang_main_block_patterns: 'PARSE_ERROR'
    };
  }
  
  return {
    coupang_main_allow: JSON.stringify(parsed.coupang_main_allow || []),
    image_cdn_allow: JSON.stringify(parsed.image_cdn_allow || []),
    img1a_cdn_allow: JSON.stringify(parsed.img1a_cdn_allow || []),
    front_cdn_allow: JSON.stringify(parsed.front_cdn_allow || []),
    static_cdn_allow: JSON.stringify(parsed.static_cdn_allow || []),
    assets_cdn_allow: JSON.stringify(parsed.assets_cdn_allow || []),
    mercury_allow: JSON.stringify(parsed.mercury_allow || []),
    ljc_allow: JSON.stringify(parsed.ljc_allow || []),
    thumbnail_cdn_allow: JSON.stringify(parsed.thumbnail_cdn_allow || []),
    coupang_main_block_patterns: JSON.stringify(parsed.coupang_main_block_patterns || [])
  };
}

/**
 * ÌÇ§ÏõåÎìú Îß§Ïπ≠ Î∞è DB Ï°∞Ìöå
 */
async function matchKeywordsWithDB(parsedData) {
  try {
    // Î™®Îì† ÌÇ§ÏõåÎìú Ï°∞Ìöå (ÏßÅÏ†ë ÏøºÎ¶¨ ÏÇ¨Ïö©)
    const result = await dbServiceV2.query(`
      SELECT id, keyword, agent, current_mode, optimization_config, 
             current_executions, success_count, fail_count, 
             consecutive_blocks, total_blocks, created_at
      FROM v2_test_keywords 
      ORDER BY id
    `);
    const allKeywords = result.rows;
    console.log(`üìã DBÏóêÏÑú ${allKeywords.length}Í∞ú ÌÇ§ÏõåÎìú Ï°∞ÌöåÎê®`);
    
    const results = [];
    
    for (const item of parsedData) {
      // ÌÇ§ÏõåÎìú Îß§Ïπ≠ (Ï†ïÌôï ÏùºÏπò Î∞è Ïú†ÏÇ¨ Îß§Ïπ≠)
      const exactMatch = allKeywords.find(k => k.keyword === item.keyword);
      let similarMatch = null;
      
      if (!exactMatch) {
        // Ïú†ÏÇ¨ Îß§Ïπ≠ (Î∂ÄÎ∂Ñ Î¨∏ÏûêÏó¥ Ìè¨Ìï®)
        similarMatch = allKeywords.find(k => 
          k.keyword.includes(item.keyword) || item.keyword.includes(k.keyword)
        );
      }
      
      const match = exactMatch || similarMatch;
      const optimizationConfig = parseOptimizationConfig(match?.optimization_config);
      
      results.push({
        ...item,
        matched: !!match,
        db_id: match?.id || null,
        db_keyword: match?.keyword || null,
        match_type: exactMatch ? 'EXACT' : similarMatch ? 'SIMILAR' : 'NO_MATCH',
        ...optimizationConfig
      });
    }
    
    return results;
  } catch (error) {
    console.error('DB Îß§Ïπ≠ Ïò§Î•ò:', error);
    throw error;
  }
}

/**
 * ÎßàÌÅ¨Îã§Ïö¥ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
 */
function generateMarkdownTable(results) {
  let markdown = `# ÌÇ§ÏõåÎìúÎ≥Ñ Optimization Config Î∂ÑÏÑù ÌÖåÏù¥Î∏î\n\n`;
  markdown += `ÏÉùÏÑ±ÏùºÏãú: ${new Date().toISOString()}\n`;
  markdown += `Ï¥ù ÌÇ§ÏõåÎìú: ${results.length}Í∞ú\n`;
  markdown += `Îß§Ïπ≠ ÏÑ±Í≥µ: ${results.filter(r => r.matched).length}Í∞ú\n\n`;
  
  // ÏÑ±Í≥µ/Ïã§Ìå® Í∑∏Î£π Íµ¨Î∂Ñ
  const successGroup = results.filter(r => r.cart > 0);
  const failGroup = results.filter(r => r.cart === 0);
  
  markdown += `## üìä ÏöîÏïΩ\n`;
  markdown += `- ‚úÖ Ïû•Î∞îÍµ¨Îãà ÏÑ±Í≥µ: ${successGroup.length}Í∞ú\n`;
  markdown += `- ‚ùå Ïû•Î∞îÍµ¨Îãà Ïã§Ìå®: ${failGroup.length}Í∞ú\n\n`;
  
  // Ï†ÑÏ≤¥ ÌÖåÏù¥Î∏î
  markdown += `## üìã Ï†ÑÏ≤¥ Î∂ÑÏÑù ÌÖåÏù¥Î∏î\n\n`;
  markdown += `| ID | ÌÇ§ÏõåÎìú | Í≤ÄÏÉâ | ÎÖ∏Ï∂ú | ÌÅ¥Î¶≠ | Ïû•Î∞îÍµ¨Îãà | Îß§Ïπ≠ | DB_ID | Îß§Ïπ≠ÌÉÄÏûÖ | Main_Allow | Image_Allow | Img1a_Allow | Front_Allow | Static_Allow | Assets_Allow | Mercury_Allow | LJC_Allow | Thumbnail_Allow | Block_Patterns |\n`;
  markdown += `|----|--------|------|------|------|-----------|------|-------|----------|------------|-------------|-------------|-------------|--------------|--------------|---------------|-----------|-----------------|----------------|\n`;
  
  results.forEach(r => {
    markdown += `| ${r.id} | ${r.keyword} | ${r.search} | ${r.exposure} | ${r.click} | ${r.cart} | ${r.matched ? '‚úÖ' : '‚ùå'} | ${r.db_id || 'N/A'} | ${r.match_type} | ${r.coupang_main_allow || 'N/A'} | ${r.image_cdn_allow || 'N/A'} | ${r.img1a_cdn_allow || 'N/A'} | ${r.front_cdn_allow || 'N/A'} | ${r.static_cdn_allow || 'N/A'} | ${r.assets_cdn_allow || 'N/A'} | ${r.mercury_allow || 'N/A'} | ${r.ljc_allow || 'N/A'} | ${r.thumbnail_cdn_allow || 'N/A'} | ${r.coupang_main_block_patterns || 'N/A'} |\n`;
  });
  
  // ÏÑ±Í≥µ Í∑∏Î£π Î∂ÑÏÑù
  if (successGroup.length > 0) {
    markdown += `\n## ‚úÖ ÏÑ±Í≥µ Í∑∏Î£π Î∂ÑÏÑù (Ïû•Î∞îÍµ¨Îãà > 0)\n\n`;
    markdown += `| ID | ÌÇ§ÏõåÎìú | Ïû•Î∞îÍµ¨Îãà | Image_Allow | Img1a_Allow | Front_Allow |\n`;
    markdown += `|----|--------|-----------|-------------|-------------|-------------|\n`;
    successGroup.forEach(r => {
      markdown += `| ${r.id} | ${r.keyword} | ${r.cart} | ${r.image_cdn_allow || 'N/A'} | ${r.img1a_cdn_allow || 'N/A'} | ${r.front_cdn_allow || 'N/A'} |\n`;
    });
  }
  
  // Ïã§Ìå® Í∑∏Î£π Î∂ÑÏÑù
  if (failGroup.length > 0) {
    markdown += `\n## ‚ùå Ïã§Ìå® Í∑∏Î£π Î∂ÑÏÑù (Ïû•Î∞îÍµ¨Îãà = 0)\n\n`;
    markdown += `| ID | ÌÇ§ÏõåÎìú | ÌÅ¥Î¶≠ | Image_Allow | Img1a_Allow | Front_Allow | Îß§Ïπ≠ |\n`;
    markdown += `|----|--------|------|-------------|-------------|-------------|------|\n`;
    failGroup.forEach(r => {
      markdown += `| ${r.id} | ${r.keyword} | ${r.click} | ${r.image_cdn_allow || 'N/A'} | ${r.img1a_cdn_allow || 'N/A'} | ${r.front_cdn_allow || 'N/A'} | ${r.matched ? '‚úÖ' : '‚ùå'} |\n`;
    });
  }
  
  return markdown;
}

/**
 * CSV ÌÖåÏù¥Î∏î ÏÉùÏÑ±
 */
function generateCSVTable(results) {
  const headers = [
    'ID', 'ÌÇ§ÏõåÎìú', 'Í≤ÄÏÉâ', 'ÎÖ∏Ï∂ú', 'ÌÅ¥Î¶≠', 'Ïû•Î∞îÍµ¨Îãà', 'Îß§Ïπ≠Ïó¨Î∂Ä', 'DB_ID', 'Îß§Ïπ≠ÌÉÄÏûÖ',
    'Main_Allow', 'Image_Allow', 'Img1a_Allow', 'Front_Allow', 'Static_Allow',
    'Assets_Allow', 'Mercury_Allow', 'LJC_Allow', 'Thumbnail_Allow', 'Block_Patterns'
  ];
  
  let csv = headers.join(',') + '\n';
  
  results.forEach(r => {
    const row = [
      r.id,
      `"${r.keyword}"`,
      r.search,
      r.exposure,
      r.click,
      r.cart,
      r.matched ? 'Îß§Ïπ≠Îê®' : 'Îß§Ïπ≠ÏïàÎê®',
      r.db_id || 'N/A',
      r.match_type,
      `"${r.coupang_main_allow || 'N/A'}"`,
      `"${r.image_cdn_allow || 'N/A'}"`,
      `"${r.img1a_cdn_allow || 'N/A'}"`,
      `"${r.front_cdn_allow || 'N/A'}"`,
      `"${r.static_cdn_allow || 'N/A'}"`,
      `"${r.assets_cdn_allow || 'N/A'}"`,
      `"${r.mercury_allow || 'N/A'}"`,
      `"${r.ljc_allow || 'N/A'}"`,
      `"${r.thumbnail_cdn_allow || 'N/A'}"`,
      `"${r.coupang_main_block_patterns || 'N/A'}"`
    ];
    csv += row.join(',') + '\n';
  });
  
  return csv;
}

/**
 * Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
 */
async function main() {
  try {
    console.log('üîç 2025-08-06 ÌÇ§ÏõåÎìú optimization_config Î∂ÑÏÑù ÏãúÏûë');
    
    // 1. ÏõêÏãú Îç∞Ïù¥ÌÑ∞ ÌååÏã±
    console.log('üìã ÏõêÏãú Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ï§ë...');
    const parsedData = parseRawData();
    console.log(`   ‚úÖ ${parsedData.length}Í∞ú ÌÇ§ÏõåÎìú ÌååÏã± ÏôÑÎ£å`);
    
    // 2. DBÏôÄ Îß§Ïπ≠
    console.log('üîó DB ÌÇ§ÏõåÎìú Îß§Ïπ≠ Ï§ë...');
    const matchedResults = await matchKeywordsWithDB(parsedData);
    const matchedCount = matchedResults.filter(r => r.matched).length;
    console.log(`   ‚úÖ ${matchedCount}Í∞ú ÌÇ§ÏõåÎìú Îß§Ïπ≠ ÏôÑÎ£å (${((matchedCount/parsedData.length)*100).toFixed(1)}%)`);
    
    // 3. ÎßàÌÅ¨Îã§Ïö¥ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    console.log('üìù ÎßàÌÅ¨Îã§Ïö¥ ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë...');
    const markdownTable = generateMarkdownTable(matchedResults);
    const markdownPath = path.join(__dirname, '..', 'analysis-optimization-config-2025-08-06.md');
    fs.writeFileSync(markdownPath, markdownTable, 'utf8');
    console.log(`   ‚úÖ ÎßàÌÅ¨Îã§Ïö¥ ÌååÏùº ÏÉùÏÑ±: ${markdownPath}`);
    
    // 4. CSV ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    console.log('üìä CSV ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë...');
    const csvTable = generateCSVTable(matchedResults);
    const csvPath = path.join(__dirname, '..', 'analysis-optimization-config-2025-08-06.csv');
    fs.writeFileSync(csvPath, csvTable, 'utf8');
    console.log(`   ‚úÖ CSV ÌååÏùº ÏÉùÏÑ±: ${csvPath}`);
    
    // 5. ÏΩòÏÜî Ï∂úÎ†•
    console.log('\n' + '='.repeat(100));
    console.log('üìã ÌÇ§ÏõåÎìúÎ≥Ñ Optimization Config Î∂ÑÏÑù Í≤∞Í≥º');
    console.log('='.repeat(100));
    console.log(`Ï¥ù ÌÇ§ÏõåÎìú: ${matchedResults.length}Í∞ú`);
    console.log(`DB Îß§Ïπ≠: ${matchedCount}Í∞ú (${((matchedCount/parsedData.length)*100).toFixed(1)}%)`);
    
    const successGroup = matchedResults.filter(r => r.cart > 0);
    const failGroup = matchedResults.filter(r => r.cart === 0);
    console.log(`ÏÑ±Í≥µ Í∑∏Î£π: ${successGroup.length}Í∞ú (Ïû•Î∞îÍµ¨Îãà > 0)`);
    console.log(`Ïã§Ìå® Í∑∏Î£π: ${failGroup.length}Í∞ú (Ïû•Î∞îÍµ¨Îãà = 0)`);
    
    console.log('\nüéØ ÌïµÏã¨ Ìå®ÌÑ¥:');
    if (successGroup.length > 0) {
      console.log('‚úÖ ÏÑ±Í≥µ Í∑∏Î£π optimization_config ÌäπÏßï:');
      successGroup.forEach(r => {
        if (r.matched) {
          console.log(`   [${r.id}] ${r.keyword} (Ïû•Î∞îÍµ¨Îãà: ${r.cart})`);
          console.log(`       Image: ${r.image_cdn_allow}, Img1a: ${r.img1a_cdn_allow}, Front: ${r.front_cdn_allow}`);
        }
      });
    }
    
    console.log('\n‚ùå Ïã§Ìå® Í∑∏Î£π optimization_config ÌäπÏßï:');
    const failedMatched = failGroup.filter(r => r.matched).slice(0, 5);
    failedMatched.forEach(r => {
      console.log(`   [${r.id}] ${r.keyword} (ÌÅ¥Î¶≠: ${r.click})`);
      console.log(`       Image: ${r.image_cdn_allow}, Img1a: ${r.img1a_cdn_allow}, Front: ${r.front_cdn_allow}`);
    });
    
    console.log('\n' + '='.repeat(100));
    
  } catch (error) {
    console.error('‚ùå Î∂ÑÏÑù Ïã§Ìå®:', error);
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ ÏßÅÏ†ë Ïã§ÌñâÏãú
if (require.main === module) {
  main();
}

module.exports = {
  parseRawData,
  parseOptimizationConfig,
  matchKeywordsWithDB,
  generateMarkdownTable,
  generateCSVTable,
  main
};
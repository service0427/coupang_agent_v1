const dbServiceV2 = require('../lib/services/db-service-v2');
const fs = require('fs');
const path = require('path');

async function analyzeProductCodes() {
  try {
    console.log('=== ID 25-29Î≤à Ïã§Ï†ú ÌÅ¥Î¶≠Ìïú ÏÉÅÌíà ÏΩîÎìú Î∂ÑÏÑù ===\n');
    
    // 1. Í∞Å ÌÇ§ÏõåÎìúÎ≥ÑÎ°ú Ïã§Ï†ú ÌÅ¥Î¶≠Ìïú ÏÉÅÌíà ÏΩîÎìúÎì§ ÌôïÏù∏
    const productResult = await dbServiceV2.query(`
      SELECT 
        keyword_id, 
        keyword,
        product_code,
        item_id,
        vendor_item_id,
        COUNT(*) as click_count
      FROM v2_execution_logs 
      WHERE keyword_id BETWEEN 25 AND 29
        AND final_status = 'stage4_success'
        AND product_code IS NOT NULL
      GROUP BY keyword_id, keyword, product_code, item_id, vendor_item_id
      ORDER BY keyword_id, click_count DESC
    `);
    
    console.log('üìã Ïã§Ï†ú ÌÅ¥Î¶≠Ìïú ÏÉÅÌíà ÏΩîÎìúÎì§:');
    let currentKeywordId = null;
    productResult.rows.forEach(row => {
      if (currentKeywordId !== row.keyword_id) {
        console.log(`\nüéØ ID ${row.keyword_id}: ${row.keyword}`);
        currentKeywordId = row.keyword_id;
      }
      console.log(`  ÏÉÅÌíàÏΩîÎìú: ${row.product_code} | ÏïÑÏù¥ÌÖúID: ${row.item_id} | Î≤§ÎçîID: ${row.vendor_item_id} | ÌÅ¥Î¶≠: ${row.click_count}Ìöå`);
    });
    
    // 2. Í∏∞ÎåÄÌñàÎçò ÏÉÅÌíàÏΩîÎìú 8538335345ÏôÄ Ïã§Ï†ú ÌÅ¥Î¶≠ ÎπÑÍµê
    console.log('\nüîç ÏÉÅÌíàÏΩîÎìú 8538335345 ÌÅ¥Î¶≠ Ïó¨Î∂Ä:');
    const targetProductResult = await dbServiceV2.query(`
      SELECT 
        keyword_id, 
        keyword,
        COUNT(CASE WHEN product_code = '8538335345' THEN 1 END) as target_clicks,
        COUNT(CASE WHEN product_code != '8538335345' OR product_code IS NULL THEN 1 END) as other_clicks,
        COUNT(*) as total_clicks
      FROM v2_execution_logs 
      WHERE keyword_id BETWEEN 25 AND 29
        AND final_status = 'stage4_success'
      GROUP BY keyword_id, keyword
      ORDER BY keyword_id
    `);
    
    targetProductResult.rows.forEach(row => {
      const targetRate = ((row.target_clicks / row.total_clicks) * 100).toFixed(1);
      const otherRate = ((row.other_clicks / row.total_clicks) * 100).toFixed(1);
      
      console.log(`\nID ${row.keyword_id}: ${row.keyword}`);
      console.log(`  8538335345 ÌÅ¥Î¶≠: ${row.target_clicks}Ìöå (${targetRate}%)`);
      console.log(`  Îã§Î•∏ ÏÉÅÌíà ÌÅ¥Î¶≠: ${row.other_clicks}Ìöå (${otherRate}%)`);
      console.log(`  Ï¥ù ÏÑ±Í≥µ ÌÅ¥Î¶≠: ${row.total_clicks}Ìöå`);
      
      if (row.other_clicks > 0) {
        console.log(`  ‚ö†Ô∏è ÏòàÏÉÅÍ≥º Îã§Î•∏ ÏÉÅÌíà ÌÅ¥Î¶≠ Î∞úÏÉù!`);
      }
    });
    
    // 3. Îã§Î•∏ ÏÉÅÌíàÏúºÎ°ú ÌÅ¥Î¶≠Ìïú Í≤ΩÏö∞Îì§Ïùò ÏÉÅÏÑ∏ Î∂ÑÏÑù
    console.log('\nüö® ÏòàÏÉÅÍ≥º Îã§Î•∏ ÏÉÅÌíàÏúºÎ°ú ÌÅ¥Î¶≠Ìïú Í≤ΩÏö∞Îì§:');
    const wrongProductResult = await dbServiceV2.query(`
      SELECT 
        keyword_id, 
        keyword,
        product_code,
        item_id,
        vendor_item_id,
        stage2_product_rank,
        stage2_total_products,
        stage3_final_url,
        started_at
      FROM v2_execution_logs 
      WHERE keyword_id BETWEEN 25 AND 29
        AND final_status = 'stage4_success'
        AND (product_code != '8538335345' OR product_code IS NULL)
      ORDER BY keyword_id, started_at
      LIMIT 20
    `);
    
    if (wrongProductResult.rows.length > 0) {
      wrongProductResult.rows.forEach(row => {
        console.log(`\n‚ùå ID ${row.keyword_id}: ${row.keyword}`);
        console.log(`  Ïã§Ï†ú ÌÅ¥Î¶≠Ìïú ÏÉÅÌíà: ${row.product_code || 'NULL'}`);
        console.log(`  ÏïÑÏù¥ÌÖúID: ${row.item_id || 'NULL'}`);
        console.log(`  Î≤§ÎçîID: ${row.vendor_item_id || 'NULL'}`);
        console.log(`  Í≤ÄÏÉâ ÏàúÏúÑ: ${row.stage2_product_rank}ÏúÑ (Ï¥ù ${row.stage2_total_products}Í∞ú ÏÉÅÌíà)`);
        console.log(`  ÏµúÏ¢Ö URL: ${row.stage3_final_url ? row.stage3_final_url.substring(0, 80) + '...' : 'NULL'}`);
        console.log(`  Ïã§Ìñâ ÏãúÍ∞Ñ: ${row.started_at}`);
      });
    } else {
      console.log('Î™®Îì† ÏÑ±Í≥µÌïú ÌÅ¥Î¶≠Ïù¥ ÏòàÏÉÅ ÏÉÅÌíàÏΩîÎìú 8538335345ÏûÖÎãàÎã§.');
    }
    
    // 4. Í≤ÄÏÉâ ÏàúÏúÑÎ≥Ñ ÌÅ¥Î¶≠ Ìå®ÌÑ¥ Î∂ÑÏÑù
    console.log('\nüìä Í≤ÄÏÉâ ÏàúÏúÑÎ≥Ñ ÌÅ¥Î¶≠ Ìå®ÌÑ¥:');
    const rankResult = await dbServiceV2.query(`
      SELECT 
        keyword_id,
        keyword,
        stage2_product_rank,
        product_code,
        COUNT(*) as count
      FROM v2_execution_logs 
      WHERE keyword_id BETWEEN 25 AND 29
        AND final_status = 'stage4_success'
        AND stage2_product_rank IS NOT NULL
      GROUP BY keyword_id, keyword, stage2_product_rank, product_code
      ORDER BY keyword_id, stage2_product_rank
    `);
    
    let currentKeyword = null;
    rankResult.rows.forEach(row => {
      if (currentKeyword !== row.keyword_id) {
        console.log(`\nID ${row.keyword_id}: ${row.keyword}`);
        currentKeyword = row.keyword_id;
      }
      console.log(`  ${row.stage2_product_rank}ÏúÑ: ${row.product_code} (${row.count}Ìöå ÌÅ¥Î¶≠)`);
    });
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
  } finally {
    await dbServiceV2.close();
  }
}

analyzeProductCodes();
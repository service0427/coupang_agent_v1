/**
 * [0/0/0/0] Ìå®ÌÑ¥ ÌÇ§ÏõåÎìú Î∂ÑÏÑù
 * Ïôú 0ÏúºÎ°ú ÌëúÏãúÎêòÎäîÏßÄ ÏõêÏù∏ ÌååÏïÖ
 */

const dbService = require('../lib/services/db-service');

async function checkZeroKeywords() {
  console.log('üîç [0/0/0/0] Ìå®ÌÑ¥ ÌÇ§ÏõåÎìú Î∂ÑÏÑù');
  console.log('='.repeat(150));

  try {
    // 1. [0/0/0/0] Ìå®ÌÑ¥ ÌÇ§ÏõåÎìú Ï∞æÍ∏∞
    const zeroPatternQuery = `
      SELECT 
        k.id,
        k.keyword,
        k.code,
        k.runs,
        k.succ,
        k.fail,
        k.userdata,
        k.session,
        k.cache,
        k.optimize,
        k.last_run,
        k.created,
        -- Ïã§Ï†ú Ïã§Ìñâ ÌÜµÍ≥Ñ
        (SELECT COUNT(*) FROM v1_executions e WHERE e.keyword_id = k.id) as actual_executions,
        (SELECT COUNT(*) FROM v1_executions e WHERE e.keyword_id = k.id AND e.success = true) as actual_success,
        (SELECT COUNT(*) FROM v1_executions e WHERE e.keyword_id = k.id AND e.found = true) as actual_found
      FROM v1_keywords k
      WHERE k.keyword LIKE '%[0/0/0/0]%'
         OR k.keyword NOT LIKE '%[%/%/%/%]%'
      ORDER BY k.id
    `;
    
    const zeroKeywords = await dbService.query(zeroPatternQuery);
    
    console.log('\nüìä [0/0/0/0] ÎòêÎäî Ìå®ÌÑ¥ ÏóÜÎäî ÌÇ§ÏõåÎìú:');
    console.log('‚îÄ'.repeat(150));
    console.log(
      'ID'.padEnd(5) + '| ' +
      'ÌÇ§ÏõåÎìú'.padEnd(40) + '| ' +
      'ÏΩîÎìú'.padEnd(12) + '| ' +
      'DBÍ∏∞Î°ù(R/S/F)'.padEnd(15) + '| ' +
      'Ïã§Ï†ú(Ïã§Ìñâ/ÏÑ±Í≥µ/Î∞úÍ≤¨)'.padEnd(20) + '| ' +
      'ÏòµÏÖò(U/S/C/O)'
    );
    console.log('‚îÄ'.repeat(150));
    
    zeroKeywords.rows.forEach(row => {
      const optionStr = `${row.userdata ? 'T' : 'F'}/${row.session ? 'T' : 'F'}/${row.cache ? 'T' : 'F'}/${row.optimize ? 'T' : 'F'}`;
      
      console.log(
        row.id.toString().padEnd(5) + '| ' +
        row.keyword.substring(0, 38).padEnd(40) + '| ' +
        (row.code || 'N/A').toString().padEnd(12) + '| ' +
        `${row.runs}/${row.succ}/${row.fail}`.padEnd(15) + '| ' +
        `${row.actual_executions}/${row.actual_success}/${row.actual_found}`.padEnd(20) + '| ' +
        optionStr
      );
    });

    // 2. Ìå®ÌÑ¥ Î∂ÑÏÑù
    console.log('\nüìà ÌÇ§ÏõåÎìú Ìå®ÌÑ¥ Î∂ÑÏÑù:');
    console.log('‚îÄ'.repeat(150));
    
    const patternAnalysisQuery = `
      WITH keyword_patterns AS (
        SELECT 
          CASE 
            WHEN keyword LIKE '%[0/0/0/0]%' THEN '[0/0/0/0] Ìå®ÌÑ¥'
            WHEN keyword ~ '\\[\\d+/\\d+/\\d+/\\d+\\]' THEN '[N/N/N/N] Ï†ïÏÉÅ Ìå®ÌÑ¥'
            ELSE 'Ìå®ÌÑ¥ ÏóÜÏùå'
          END as pattern_type,
          COUNT(*) as count,
          AVG(runs) as avg_runs,
          AVG(succ) as avg_succ,
          AVG(
            (SELECT COUNT(*) FROM v1_executions e WHERE e.keyword_id = k.id)
          ) as avg_actual_exec
        FROM v1_keywords k
        GROUP BY pattern_type
      )
      SELECT * FROM keyword_patterns
      ORDER BY pattern_type
    `;
    
    const patterns = await dbService.query(patternAnalysisQuery);
    
    console.log(
      'Ìå®ÌÑ¥ Ïú†Ìòï'.padEnd(20) + '| ' +
      'Í∞úÏàò'.padEnd(8) + '| ' +
      'ÌèâÍ∑† runs'.padEnd(10) + '| ' +
      'ÌèâÍ∑† succ'.padEnd(10) + '| ' +
      'ÌèâÍ∑† Ïã§Ï†úÏã§Ìñâ'
    );
    console.log('‚îÄ'.repeat(150));
    
    patterns.rows.forEach(row => {
      console.log(
        row.pattern_type.padEnd(20) + '| ' +
        row.count.toString().padEnd(8) + '| ' +
        parseFloat(row.avg_runs || 0).toFixed(1).padEnd(10) + '| ' +
        parseFloat(row.avg_succ || 0).toFixed(1).padEnd(10) + '| ' +
        parseFloat(row.avg_actual_exec || 0).toFixed(1)
      );
    });

    // 3. ID 36 ÏÉÅÏÑ∏ Î∂ÑÏÑù
    console.log('\nüîç ID 36 ÏÉÅÏÑ∏ Î∂ÑÏÑù:');
    console.log('‚îÄ'.repeat(150));
    
    const id36Query = `
      SELECT 
        k.*,
        (SELECT COUNT(*) FROM v1_executions e WHERE e.keyword_id = 36) as total_exec,
        (SELECT COUNT(*) FROM v1_executions e WHERE e.keyword_id = 36 AND e.success = true) as success_exec,
        (SELECT MIN(e.executed) FROM v1_executions e WHERE e.keyword_id = 36) as first_exec,
        (SELECT MAX(e.executed) FROM v1_executions e WHERE e.keyword_id = 36) as last_exec
      FROM v1_keywords k
      WHERE k.id = 36
    `;
    
    const id36 = await dbService.query(id36Query);
    
    if (id36.rows.length > 0) {
      const row = id36.rows[0];
      console.log(`  ID: ${row.id}`);
      console.log(`  ÌÇ§ÏõåÎìú: ${row.keyword}`);
      console.log(`  ÏΩîÎìú: ${row.code || 'N/A'}`);
      console.log(`  DB Í∏∞Î°ù: runs=${row.runs}, succ=${row.succ}, fail=${row.fail}`);
      console.log(`  Ïã§Ï†ú Ïã§Ìñâ: ${row.total_exec}Ìöå (ÏÑ±Í≥µ: ${row.success_exec}Ìöå)`);
      console.log(`  Ï≤´ Ïã§Ìñâ: ${row.first_exec || 'N/A'}`);
      console.log(`  ÎßàÏßÄÎßâ Ïã§Ìñâ: ${row.last_exec || 'N/A'}`);
      console.log(`  ÏòµÏÖò: userdata=${row.userdata}, session=${row.session}, cache=${row.cache}, optimize=${row.optimize}`);
      
      // Ïã§Ìñâ Î°úÍ∑∏ ÏÉòÌîå
      const execLogsQuery = `
        SELECT 
          executed,
          success,
          found,
          cart,
          rank,
          pages,
          duration,
          error
        FROM v1_executions
        WHERE keyword_id = 36
        ORDER BY executed DESC
        LIMIT 5
      `;
      
      const execLogs = await dbService.query(execLogsQuery);
      
      if (execLogs.rows.length > 0) {
        console.log('\n  ÏµúÍ∑º Ïã§Ìñâ Î°úÍ∑∏:');
        execLogs.rows.forEach((log, idx) => {
          console.log(`    ${idx + 1}. ${new Date(log.executed).toLocaleString('ko-KR')}`);
          console.log(`       ÏÑ±Í≥µ: ${log.success}, Î∞úÍ≤¨: ${log.found}, Ïû•Î∞îÍµ¨Îãà: ${log.cart}`);
          console.log(`       ÏàúÏúÑ: ${log.rank || 'N/A'}, ÌéòÏù¥ÏßÄ: ${log.pages || 'N/A'}, ÏãúÍ∞Ñ: ${(log.duration/1000).toFixed(1)}Ï¥à`);
          if (log.error) {
            console.log(`       ÏóêÎü¨: ${log.error.substring(0, 50)}`);
          }
        });
      }
    }

    // 4. Í∞ÄÎä•Ìïú ÏõêÏù∏ Î∂ÑÏÑù
    console.log('\nüí° [0/0/0/0] Ìå®ÌÑ¥ Í∞ÄÎä•Ìïú ÏõêÏù∏:');
    console.log('‚îÄ'.repeat(150));
    console.log('  1. Ï¥àÍ∏∞ Îì±Î°ù Ïãú ÌÜµÍ≥Ñ Í∞íÏùÑ ÏûÖÎ†•ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞');
    console.log('  2. ÌÖåÏä§Ìä∏Ïö© ÌÇ§ÏõåÎìúÎ°ú Ïã§Ï†ú ÌÜµÍ≥ÑÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞');  
    console.log('  3. ÏàòÎèôÏúºÎ°ú Ï∂îÍ∞ÄÌïú ÌÇ§ÏõåÎìúÎ°ú ÏòàÏÉÅ Í∞íÏù¥ ÏóÜÎäî Í≤ΩÏö∞');
    console.log('  4. Îã§Î•∏ ÏãúÏä§ÌÖúÏóêÏÑú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïãú Îç∞Ïù¥ÌÑ∞ ÎàÑÎùΩ');
    
    // 5. Ïã§Ï†ú ÏÑ±Îä• vs Ìå®ÌÑ¥
    console.log('\nüìä Ìå®ÌÑ¥Î≥Ñ Ïã§Ï†ú ÏÑ±Îä• ÎπÑÍµê:');
    console.log('‚îÄ'.repeat(150));
    
    const performanceQuery = `
      WITH performance_stats AS (
        SELECT 
          CASE 
            WHEN k.keyword LIKE '%[0/0/0/0]%' THEN '[0/0/0/0]'
            WHEN k.keyword ~ '\\[\\d+/\\d+/\\d+/\\d+\\]' THEN 'Ï†ïÏÉÅ Ìå®ÌÑ¥'
            ELSE 'Ìå®ÌÑ¥ ÏóÜÏùå'
          END as pattern,
          AVG(CASE WHEN e.success THEN 100.0 ELSE 0 END) as success_rate,
          AVG(CASE WHEN e.found THEN 100.0 ELSE 0 END) as found_rate,
          COUNT(DISTINCT k.id) as keyword_count,
          COUNT(e.id) as total_executions
        FROM v1_keywords k
        LEFT JOIN v1_executions e ON k.id = e.keyword_id
        GROUP BY pattern
      )
      SELECT * FROM performance_stats
      WHERE total_executions > 0
      ORDER BY pattern
    `;
    
    const performance = await dbService.query(performanceQuery);
    
    console.log(
      'Ìå®ÌÑ¥'.padEnd(15) + '| ' +
      'ÌÇ§ÏõåÎìúÏàò'.padEnd(10) + '| ' +
      'Ï¥ù Ïã§Ìñâ'.padEnd(10) + '| ' +
      'ÏÑ±Í≥µÎ•†'.padEnd(10) + '| ' +
      'Î∞úÍ≤¨Î•†'
    );
    console.log('‚îÄ'.repeat(150));
    
    performance.rows.forEach(row => {
      console.log(
        row.pattern.padEnd(15) + '| ' +
        row.keyword_count.toString().padEnd(10) + '| ' +
        row.total_executions.toString().padEnd(10) + '| ' +
        `${parseFloat(row.success_rate).toFixed(1)}%`.padEnd(10) + '| ' +
        `${parseFloat(row.found_rate).toFixed(1)}%`
      );
    });
    
  } catch (error) {
    console.error('Ïò§Î•ò Î∞úÏÉù:', error.message);
  } finally {
    await dbService.close();
  }
}

// Ïã§Ìñâ
checkZeroKeywords();